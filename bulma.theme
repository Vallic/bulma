<?php

/**
 * @file
 * The primary PHP file for the Drupal Bulma base theme.
 */

use Drupal\bulma\Bulma;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Element\RenderElement;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Render\MarkupInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements template_preprocess_page().
 */
function bulma_preprocess_page(&$variables) {

}

/**
 * Implements theme_menu_local_tasks().
 */
function bulma_preprocess_menu_local_tasks(&$variables) {

  // Load Bulma class from settings.
  $bulma_tabs_class = Bulma::multiSettings('tabs');

  if (!empty($bulma_tabs_class)) {
    // Set variables.
    foreach ($bulma_tabs_class as $key => $class) {
      $variables[str_replace('is-', '', $key)] = $class;
    }

  }

}

/**
 * Implements hook_form_alter().
 */
function bulma_form_alter(&$form, $form_state, $form_id) {

  // Check for actions buttons, group them.
  if (isset($form['actions'])) {
    $form['actions']['#attributes']['class'][] = 'field';
    $form['actions']['#attributes']['class'][] = 'is-grouped';
  }

}

/**
 * Implements template_preprocess_table().
 */
function bulma_preprocess_table(&$variables) {

  // Load existing classes.
  $existing_class = $variables['attributes']['class'];

  // Load Bulma specific table classes from theme settings.
  $bulma_table_class = Bulma::multiSettings('table');

  // Merge classes.
  if (!empty($bulma_table_class)) {
    $variables['attributes']['class'] = array_merge($existing_class, $bulma_table_class);
  }

}

/**
 * Implements template_preprocess_form_element().
 */
function bulma_preprocess_form_element(&$variables) {
  $element = &$variables['element'];

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by
  // \Drupal::formBuilder()->doBuildForm().
  $element += [
    '#title_display' => 'before',
    '#wrapper_attributes' => [],
    '#label_attributes' => [],
  ];
  $variables['attributes'] = $element['#wrapper_attributes'];

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $variables['attributes']['id'] = $element['#id'];
  }

  // Pass elements #type and #name to template.
  if (!empty($element['#type'])) {
    $variables['type'] = $element['#type'];
  }
  if (!empty($element['#name'])) {
    $variables['name'] = $element['#name'];
  }

  // Pass elements disabled status to template.
  $variables['disabled'] = !empty($element['#attributes']['disabled']) ? $element['#attributes']['disabled'] : NULL;

  // Suppress error messages.
  $variables['errors'] = NULL;

  // If #title is not set, we don't display any label.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }

  $variables['title_display'] = $element['#title_display'];

  $variables['prefix'] = isset($element['#field_prefix']) ? $element['#field_prefix'] : NULL;
  $variables['suffix'] = isset($element['#field_suffix']) ? $element['#field_suffix'] : NULL;

  $variables['description'] = NULL;
  if (!empty($element['#description'])) {
    $variables['description_display'] = $element['#description_display'];
    $description_attributes = [];
    if (!empty($element['#id'])) {
      $description_attributes['id'] = $element['#id'] . '--description';
    }
    $variables['description']['attributes'] = new Attribute($description_attributes);
    $variables['description']['content'] = $element['#description'];
  }

  // Add label_display and label variables to template.
  $variables['label_display'] = $element['#title_display'];
  $variables['label'] = ['#theme' => 'form_element_label'];
  $variables['label'] += array_intersect_key($element, array_flip([
    '#id',
    '#required',
    '#title',
    '#title_display',
  ]));
  $variables['label']['#attributes'] = $element['#label_attributes'];

  $variables['children'] = $element['#children'];

}

/**
 * Implements template_preprocess_form_element_label().
 */
function bulma_preprocess_form_element_label(&$variables) {

  // Check additional theme labels settings.
  $bulma_labels = Bulma::multiSettings('label');

  if (!empty($bulma_labels)) {
    foreach ($bulma_labels as $key => $value) {
      $variables[$key] = $value;
    }
  }
}

/**
 * Implements template_preprocess_input().
 */
function bulma_preprocess_input(&$variables) {

  // We need to wrap some elements, some not.
  switch ($variables['element']['#type']) {

    // Skip hidden field from all preprocess.
    case 'token':
    case 'hidden':
      $variables['bulma_type'] = FALSE;
      $variables['bulma_form'] = FALSE;
      break;

    // Skip radio/checkbox, they need different wrapping.
    case 'radio':
    case 'checkbox':
      $variables['bulma_type'] = FALSE;
      break;

    // Separate type, options to colorize buttons.
    case 'submit':
      $variables['bulma_type'] = TRUE;

      // Get all button settings.
      $bulma_button = Bulma::multiSettings('button');

      if (!empty($bulma_button)) {
        foreach ($bulma_button as $key => $class) {

          // If buttons should be colorized by task/action.
          if ($key == 'colorize') {
            // Get string to check.
            $name = $variables['element']['#value']->getUntranslatedString();

            // Get class.
            $color = Bulma::cssClassFromString($name, 'is-primary');

            // Assign color.
            $variables['attributes']['class'][] = $color;
          }

          else {
            $variables['attributes']['class'][] = $class;
          }
        }
      }

      break;

    // Living on the edge ¯\_(ツ)_/¯.
    // In most cases this will work, but for some field types maybe not.
    // Submit issue on project page if your field is not happy with this class.
    default:
      $variables['bulma_type'] = TRUE;
      $variables['attributes']['class'][] = 'input';

  }

}

/**
 * Implements template_preprocess_page_title().
 */
function bulma_preprocess_page_title(&$variables) {
  $variables['title_attributes']['class'] = 'title';
}

/**
 * Implements template_preprocess_views_view_table().
 */
function bulma_preprocess_views_view_table(&$variables) {

  // Define defaults for variables.
  $variables['bordered'] = FALSE;
  $variables['striped'] = FALSE;
  $variables['narrow'] = FALSE;
  $variables['table'] = TRUE;

  // Load Bulma specific table classes from theme settings.
  $bulma_table_class = Bulma::multiSettings('table');

  if (!empty($bulma_table_class)) {
    foreach ($bulma_table_class as $key => $class) {
      $variables[str_replace('is-', '', $class)] = TRUE;
    }
  }
}
