<?php

/**
 * @file
 * The primary PHP file for the Drupal Bulma base theme.
 */

use Drupal\bulma\Bulma;

/**
 * Implements template_preprocess_page().
 */
function bulma_preprocess_page(&$variables) {

  // Site slogan as separate variable.
  $site_config = \Drupal::config('system.site');
  $variables['site_slogan'] = $site_config->get('slogan');
}

/**
 * Implements hook_page_attachments_alter().
 */
function bulma_page_attachments_alter(&$page) {

  // Force IE to use Chrome Frame if installed.
  $page['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => [
        'http-equiv' => 'X-UA-Compatible',
        'content' => 'IE=edge,chrome=1',
      ],
    ],
    'chrome_frame',
  ];

  // Remove image toolbar in IE.
  $page['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => [
        'http-equiv' => 'ImageToolbar',
        'content' => 'false',
      ],
    ],
    'ie_image_toolbar',
  ];
}

/**
 * Implements theme_menu_local_tasks().
 */
function bulma_preprocess_menu_local_tasks(&$variables) {

  // Load Bulma class from settings.
  $bulma_tabs_class = Bulma::multiSettings('tabs');

  if (!empty($bulma_tabs_class)) {
    // Set variables.
    foreach ($bulma_tabs_class as $key => $class) {
      $variables[str_replace('is-', '', $key)] = $class;
    }

  }

}

/**
 * Implements hook_form_alter().
 */
function bulma_form_alter(&$form, $form_state, $form_id) {

  // Check for actions buttons, group them.
  if (isset($form['actions'])) {
    $form['actions']['#attributes']['class'][] = 'field';
    $form['actions']['#attributes']['class'][] = 'is-grouped';
  }

}

/**
 * Implements template_preprocess_block().
 */
function bulma_preprocess_block(&$variables) {

  // Block as panel style.
  if (Bulma::singleSetting('bulma_general_block')) {
    if ($variables['configuration']['label_display']) {
      $variables['block_panel_style'] = TRUE;
    }
  }

}

/**
 * Implements template_preprocess_table().
 */
function bulma_preprocess_table(&$variables) {

  // Load existing classes.
  $existing_class = $variables['attributes']['class'];

  // Load Bulma specific table classes from theme settings.
  $bulma_table_class = Bulma::multiSettings('table');

  // Merge classes.
  if (!empty($bulma_table_class)) {
    $variables['attributes']['class'] = array_merge($existing_class, $bulma_table_class);
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bulma_theme_suggestions_input_alter(array &$suggestions, array $variables) {

  // Add theme suggestions for wrapping buttons.
  // Moved from _preprocess_input for future horizontal form implementation.
  if (!in_array($variables['element']['#type'], [
    'hidden',
    'token',
    'radio',
    'checkbox',
  ])
  ) {
    $suggestions[] = 'input__bulma';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bulma_theme_suggestions_menu_alter(array &$suggestions, array $variables) {

  // Get suggestion for menu nav.
  $suggestions = Bulma::themeSuggest($variables['menu_name'], 'menu', 'bulma_general_menu');

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bulma_theme_suggestions_block_alter(array &$suggestions, array $variables) {

  // Get menu blocks only. But you can use this clean block output anywhere.
  if ($variables['elements']['#base_plugin_id'] == 'system_menu_block') {
    $suggestions = Bulma::themeSuggest($variables['elements']['#plugin_id'], 'block', 'bulma_general_menu');
  }

}

/**
 * Implements template_preprocess_form_element().
 */
function bulma_preprocess_form_element(&$variables) {

  // Render the form element inside the label for checkbox and radio.
  if (in_array($variables['element']['#type'], ['checkbox', 'radio'])) {
    $variables['label']['#children'] = $variables['children'];
    unset($variables['children']);
  }

}

/**
 * Implements template_preprocess_form_element_label().
 */
function bulma_preprocess_form_element_label(&$variables) {

  // Check additional theme labels settings.
  $bulma_labels = Bulma::multiSettings('label');

  if (!empty($bulma_labels)) {
    foreach ($bulma_labels as $key => $value) {
      $variables[$key] = $value;
    }
  }
}

/**
 * Implements template_preprocess_input().
 */
function bulma_preprocess_input(&$variables) {

  // Colorize buttons.
  if ($variables['element']['#type'] == 'submit') {
    // Get all button settings.
    $bulma_button = Bulma::multiSettings('button');

    if (!empty($bulma_button)) {
      foreach ($bulma_button as $key => $class) {

        // If buttons should be colorized by task/action.
        if ($key == 'colorize') {
          // Get string to check.
          $name = $variables['element']['#value']->getUntranslatedString();

          // Get class.
          $color = Bulma::cssClassFromString($name, 'is-primary');

          // Assign color.
          $variables['attributes']['class'][] = $color;
        }

        else {
          $variables['attributes']['class'][] = $class;
        }
      }
    }
  }

}

/**
 * Implements template_preprocess_page_title().
 */
function bulma_preprocess_page_title(&$variables) {
  $variables['title_attributes']['class'] = 'title';
}

/**
 * Implements template_preprocess_views_view_table().
 */
function bulma_preprocess_views_view_table(&$variables) {

  // Define defaults for variables.
  $variables['bordered'] = FALSE;
  $variables['striped'] = FALSE;
  $variables['narrow'] = FALSE;
  $variables['table'] = TRUE;

  // Load Bulma specific table classes from theme settings.
  $bulma_table_class = Bulma::multiSettings('table');

  if (!empty($bulma_table_class)) {
    foreach ($bulma_table_class as $class) {
      $variables[str_replace('is-', '', $class)] = TRUE;
    }
  }
}
